// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Fold;
use LeafletChildTransitionType;
use LeafletModeTransitionType;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk;
use handy_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Leaflet(Object<handy_sys::HdyLeaflet, handy_sys::HdyLeafletClass, LeafletClass>) @extends gtk::Container, gtk::Widget;

    match fn {
        get_type => || handy_sys::hdy_leaflet_get_type(),
    }
}

impl Leaflet {
    pub fn new() -> Leaflet {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(handy_sys::hdy_leaflet_new()).unsafe_cast()
        }
    }
}

impl Default for Leaflet {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_LEAFLET: Option<&Leaflet> = None;

pub trait LeafletExt: 'static {
    fn get_child_transition_duration(&self) -> u32;

    fn get_child_transition_running(&self) -> bool;

    fn get_child_transition_type(&self) -> LeafletChildTransitionType;

    fn get_fold(&self) -> Fold;

    fn get_homogeneous(&self, fold: Fold, orientation: gtk::Orientation) -> bool;

    fn get_interpolate_size(&self) -> bool;

    fn get_mode_transition_duration(&self) -> u32;

    fn get_mode_transition_type(&self) -> LeafletModeTransitionType;

    fn get_visible_child(&self) -> Option<gtk::Widget>;

    fn get_visible_child_name(&self) -> Option<GString>;

    fn set_child_transition_duration(&self, duration: u32);

    fn set_child_transition_type(&self, transition: LeafletChildTransitionType);

    fn set_homogeneous(&self, fold: Fold, orientation: gtk::Orientation, homogeneous: bool);

    fn set_interpolate_size(&self, interpolate_size: bool);

    fn set_mode_transition_duration(&self, duration: u32);

    fn set_mode_transition_type(&self, transition: LeafletModeTransitionType);

    fn set_visible_child<P: IsA<gtk::Widget>>(&self, visible_child: &P);

    fn set_visible_child_name(&self, name: &str);

    fn get_property_folded(&self) -> bool;

    fn get_property_hhomogeneous_folded(&self) -> bool;

    fn set_property_hhomogeneous_folded(&self, hhomogeneous_folded: bool);

    fn get_property_hhomogeneous_unfolded(&self) -> bool;

    fn set_property_hhomogeneous_unfolded(&self, hhomogeneous_unfolded: bool);

    fn get_property_vhomogeneous_folded(&self) -> bool;

    fn set_property_vhomogeneous_folded(&self, vhomogeneous_folded: bool);

    fn get_property_vhomogeneous_unfolded(&self) -> bool;

    fn set_property_vhomogeneous_unfolded(&self, vhomogeneous_unfolded: bool);

    fn get_child_icon_name<T: IsA<gtk::Widget>>(&self, item: &T) -> Option<GString>;

    fn set_child_icon_name<T: IsA<gtk::Widget>>(&self, item: &T, icon_name: Option<&str>);

    fn get_child_name<T: IsA<gtk::Widget>>(&self, item: &T) -> Option<GString>;

    fn set_child_name<T: IsA<gtk::Widget>>(&self, item: &T, name: Option<&str>);

    fn get_child_needs_attention<T: IsA<gtk::Widget>>(&self, item: &T) -> bool;

    fn set_child_needs_attention<T: IsA<gtk::Widget>>(&self, item: &T, needs_attention: bool);

    fn get_child_position<T: IsA<gtk::Widget>>(&self, item: &T) -> i32;

    fn set_child_position<T: IsA<gtk::Widget>>(&self, item: &T, position: i32);

    fn get_child_title<T: IsA<gtk::Widget>>(&self, item: &T) -> Option<GString>;

    fn set_child_title<T: IsA<gtk::Widget>>(&self, item: &T, title: Option<&str>);

    fn connect_property_child_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_child_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_child_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_fold_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mode_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mode_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_child_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Leaflet>> LeafletExt for O {
    fn get_child_transition_duration(&self) -> u32 {
        unsafe {
            handy_sys::hdy_leaflet_get_child_transition_duration(self.as_ref().to_glib_none().0)
        }
    }

    fn get_child_transition_running(&self) -> bool {
        unsafe {
            from_glib(handy_sys::hdy_leaflet_get_child_transition_running(self.as_ref().to_glib_none().0))
        }
    }

    fn get_child_transition_type(&self) -> LeafletChildTransitionType {
        unsafe {
            from_glib(handy_sys::hdy_leaflet_get_child_transition_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_fold(&self) -> Fold {
        unsafe {
            from_glib(handy_sys::hdy_leaflet_get_fold(self.as_ref().to_glib_none().0))
        }
    }

    fn get_homogeneous(&self, fold: Fold, orientation: gtk::Orientation) -> bool {
        unsafe {
            from_glib(handy_sys::hdy_leaflet_get_homogeneous(self.as_ref().to_glib_none().0, fold.to_glib(), orientation.to_glib()))
        }
    }

    fn get_interpolate_size(&self) -> bool {
        unsafe {
            from_glib(handy_sys::hdy_leaflet_get_interpolate_size(self.as_ref().to_glib_none().0))
        }
    }

    fn get_mode_transition_duration(&self) -> u32 {
        unsafe {
            handy_sys::hdy_leaflet_get_mode_transition_duration(self.as_ref().to_glib_none().0)
        }
    }

    fn get_mode_transition_type(&self) -> LeafletModeTransitionType {
        unsafe {
            from_glib(handy_sys::hdy_leaflet_get_mode_transition_type(self.as_ref().to_glib_none().0))
        }
    }

    fn get_visible_child(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(handy_sys::hdy_leaflet_get_visible_child(self.as_ref().to_glib_none().0))
        }
    }

    fn get_visible_child_name(&self) -> Option<GString> {
        unsafe {
            from_glib_none(handy_sys::hdy_leaflet_get_visible_child_name(self.as_ref().to_glib_none().0))
        }
    }

    fn set_child_transition_duration(&self, duration: u32) {
        unsafe {
            handy_sys::hdy_leaflet_set_child_transition_duration(self.as_ref().to_glib_none().0, duration);
        }
    }

    fn set_child_transition_type(&self, transition: LeafletChildTransitionType) {
        unsafe {
            handy_sys::hdy_leaflet_set_child_transition_type(self.as_ref().to_glib_none().0, transition.to_glib());
        }
    }

    fn set_homogeneous(&self, fold: Fold, orientation: gtk::Orientation, homogeneous: bool) {
        unsafe {
            handy_sys::hdy_leaflet_set_homogeneous(self.as_ref().to_glib_none().0, fold.to_glib(), orientation.to_glib(), homogeneous.to_glib());
        }
    }

    fn set_interpolate_size(&self, interpolate_size: bool) {
        unsafe {
            handy_sys::hdy_leaflet_set_interpolate_size(self.as_ref().to_glib_none().0, interpolate_size.to_glib());
        }
    }

    fn set_mode_transition_duration(&self, duration: u32) {
        unsafe {
            handy_sys::hdy_leaflet_set_mode_transition_duration(self.as_ref().to_glib_none().0, duration);
        }
    }

    fn set_mode_transition_type(&self, transition: LeafletModeTransitionType) {
        unsafe {
            handy_sys::hdy_leaflet_set_mode_transition_type(self.as_ref().to_glib_none().0, transition.to_glib());
        }
    }

    fn set_visible_child<P: IsA<gtk::Widget>>(&self, visible_child: &P) {
        unsafe {
            handy_sys::hdy_leaflet_set_visible_child(self.as_ref().to_glib_none().0, visible_child.as_ref().to_glib_none().0);
        }
    }

    fn set_visible_child_name(&self, name: &str) {
        unsafe {
            handy_sys::hdy_leaflet_set_visible_child_name(self.as_ref().to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn get_property_folded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"folded\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `folded` getter").unwrap()
        }
    }

    fn get_property_hhomogeneous_folded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"hhomogeneous-folded\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `hhomogeneous-folded` getter").unwrap()
        }
    }

    fn set_property_hhomogeneous_folded(&self, hhomogeneous_folded: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"hhomogeneous-folded\0".as_ptr() as *const _, Value::from(&hhomogeneous_folded).to_glib_none().0);
        }
    }

    fn get_property_hhomogeneous_unfolded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"hhomogeneous-unfolded\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `hhomogeneous-unfolded` getter").unwrap()
        }
    }

    fn set_property_hhomogeneous_unfolded(&self, hhomogeneous_unfolded: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"hhomogeneous-unfolded\0".as_ptr() as *const _, Value::from(&hhomogeneous_unfolded).to_glib_none().0);
        }
    }

    fn get_property_vhomogeneous_folded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"vhomogeneous-folded\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `vhomogeneous-folded` getter").unwrap()
        }
    }

    fn set_property_vhomogeneous_folded(&self, vhomogeneous_folded: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"vhomogeneous-folded\0".as_ptr() as *const _, Value::from(&vhomogeneous_folded).to_glib_none().0);
        }
    }

    fn get_property_vhomogeneous_unfolded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"vhomogeneous-unfolded\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `vhomogeneous-unfolded` getter").unwrap()
        }
    }

    fn set_property_vhomogeneous_unfolded(&self, vhomogeneous_unfolded: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"vhomogeneous-unfolded\0".as_ptr() as *const _, Value::from(&vhomogeneous_unfolded).to_glib_none().0);
        }
    }

    fn get_child_icon_name<T: IsA<gtk::Widget>>(&self, item: &T) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gtk_sys::gtk_container_child_get_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"icon-name\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `icon-name` getter")
        }
    }

    fn set_child_icon_name<T: IsA<gtk::Widget>>(&self, item: &T, icon_name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_container_child_set_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"icon-name\0".as_ptr() as *const _, Value::from(icon_name).to_glib_none().0);
        }
    }

    fn get_child_name<T: IsA<gtk::Widget>>(&self, item: &T) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gtk_sys::gtk_container_child_get_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"name\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `name` getter")
        }
    }

    fn set_child_name<T: IsA<gtk::Widget>>(&self, item: &T, name: Option<&str>) {
        unsafe {
            gtk_sys::gtk_container_child_set_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"name\0".as_ptr() as *const _, Value::from(name).to_glib_none().0);
        }
    }

    fn get_child_needs_attention<T: IsA<gtk::Widget>>(&self, item: &T) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gtk_sys::gtk_container_child_get_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"needs-attention\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `needs-attention` getter").unwrap()
        }
    }

    fn set_child_needs_attention<T: IsA<gtk::Widget>>(&self, item: &T, needs_attention: bool) {
        unsafe {
            gtk_sys::gtk_container_child_set_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"needs-attention\0".as_ptr() as *const _, Value::from(&needs_attention).to_glib_none().0);
        }
    }

    fn get_child_position<T: IsA<gtk::Widget>>(&self, item: &T) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gtk_sys::gtk_container_child_get_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"position\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `position` getter").unwrap()
        }
    }

    fn set_child_position<T: IsA<gtk::Widget>>(&self, item: &T, position: i32) {
        unsafe {
            gtk_sys::gtk_container_child_set_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"position\0".as_ptr() as *const _, Value::from(&position).to_glib_none().0);
        }
    }

    fn get_child_title<T: IsA<gtk::Widget>>(&self, item: &T) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gtk_sys::gtk_container_child_get_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"title\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `title` getter")
        }
    }

    fn set_child_title<T: IsA<gtk::Widget>>(&self, item: &T, title: Option<&str>) {
        unsafe {
            gtk_sys::gtk_container_child_set_property(self.to_glib_none().0 as *mut gtk_sys::GtkContainer, item.to_glib_none().0 as *mut _, b"title\0".as_ptr() as *const _, Value::from(title).to_glib_none().0);
        }
    }

    fn connect_property_child_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_transition_duration_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::child-transition-duration\0".as_ptr() as *const _,
                Some(transmute(notify_child_transition_duration_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_child_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_transition_running_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::child-transition-running\0".as_ptr() as *const _,
                Some(transmute(notify_child_transition_running_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_child_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_transition_type_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::child-transition-type\0".as_ptr() as *const _,
                Some(transmute(notify_child_transition_type_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_fold_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fold_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::fold\0".as_ptr() as *const _,
                Some(transmute(notify_fold_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_folded_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::folded\0".as_ptr() as *const _,
                Some(transmute(notify_folded_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_hhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hhomogeneous_folded_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hhomogeneous-folded\0".as_ptr() as *const _,
                Some(transmute(notify_hhomogeneous_folded_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_hhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hhomogeneous_unfolded_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hhomogeneous-unfolded\0".as_ptr() as *const _,
                Some(transmute(notify_hhomogeneous_unfolded_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_interpolate_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::interpolate-size\0".as_ptr() as *const _,
                Some(transmute(notify_interpolate_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_mode_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_transition_duration_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mode-transition-duration\0".as_ptr() as *const _,
                Some(transmute(notify_mode_transition_duration_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_mode_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mode_transition_type_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mode-transition-type\0".as_ptr() as *const _,
                Some(transmute(notify_mode_transition_type_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_vhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vhomogeneous_folded_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vhomogeneous-folded\0".as_ptr() as *const _,
                Some(transmute(notify_vhomogeneous_folded_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_vhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vhomogeneous_unfolded_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vhomogeneous-unfolded\0".as_ptr() as *const _,
                Some(transmute(notify_vhomogeneous_unfolded_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_visible_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_visible_child_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::visible-child\0".as_ptr() as *const _,
                Some(transmute(notify_visible_child_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_visible_child_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_visible_child_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyLeaflet, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Leaflet>
        {
            let f: &F = &*(f as *const F);
            f(&Leaflet::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::visible-child-name\0".as_ptr() as *const _,
                Some(transmute(notify_visible_child_name_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Leaflet {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Leaflet")
    }
}

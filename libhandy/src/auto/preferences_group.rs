// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v0_0_10", feature = "dox"))]
use glib::object::Cast;
use glib::object::IsA;
#[cfg(any(feature = "v0_0_10", feature = "dox"))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v0_0_10", feature = "dox"))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v0_0_10", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v0_0_10", feature = "dox"))]
use glib_sys;
use gtk;
use handy_sys;
#[cfg(any(feature = "v0_0_10", feature = "dox"))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v0_0_10", feature = "dox"))]
use std::mem::transmute;

glib_wrapper! {
    pub struct PreferencesGroup(Object<handy_sys::HdyPreferencesGroup, handy_sys::HdyPreferencesGroupClass, PreferencesGroupClass>) @extends gtk::Box, gtk::Container, gtk::Widget, @implements gtk::Orientable;

    match fn {
        get_type => || handy_sys::hdy_preferences_group_get_type(),
    }
}

impl PreferencesGroup {
    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    pub fn new() -> PreferencesGroup {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(handy_sys::hdy_preferences_group_new())
        }
    }
}

#[cfg(any(feature = "v0_0_10", feature = "dox"))]
impl Default for PreferencesGroup {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_PREFERENCES_GROUP: Option<&PreferencesGroup> = None;

pub trait PreferencesGroupExt: 'static {
    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_description(&self) -> Option<GString>;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_title(&self) -> Option<GString>;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_description(&self, description: &str);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_title(&self, title: &str);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<PreferencesGroup>> PreferencesGroupExt for O {
    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_description(&self) -> Option<GString> {
        unsafe {
            from_glib_none(handy_sys::hdy_preferences_group_get_description(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(handy_sys::hdy_preferences_group_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_description(&self, description: &str) {
        unsafe {
            handy_sys::hdy_preferences_group_set_description(self.as_ref().to_glib_none().0, description.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_title(&self, title: &str) {
        unsafe {
            handy_sys::hdy_preferences_group_set_title(self.as_ref().to_glib_none().0, title.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_description_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_description_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyPreferencesGroup, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<PreferencesGroup>
        {
            let f: &F = &*(f as *const F);
            f(&PreferencesGroup::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::description\0".as_ptr() as *const _,
                Some(transmute(notify_description_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyPreferencesGroup, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<PreferencesGroup>
        {
            let f: &F = &*(f as *const F);
            f(&PreferencesGroup::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(transmute(notify_title_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for PreferencesGroup {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PreferencesGroup")
    }
}

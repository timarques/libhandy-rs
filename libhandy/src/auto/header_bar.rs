// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use CenteringPolicy;
use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk;
use handy_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct HeaderBar(Object<handy_sys::HdyHeaderBar, handy_sys::HdyHeaderBarClass, HeaderBarClass>) @extends gtk::Container, gtk::Widget;

    match fn {
        get_type => || handy_sys::hdy_header_bar_get_type(),
    }
}

impl HeaderBar {
    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    pub fn new() -> HeaderBar {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(handy_sys::hdy_header_bar_new()).unsafe_cast()
        }
    }
}

#[cfg(any(feature = "v0_0_10", feature = "dox"))]
impl Default for HeaderBar {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_HEADER_BAR: Option<&HeaderBar> = None;

pub trait HeaderBarExt: 'static {
    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_centering_policy(&self) -> CenteringPolicy;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_custom_title(&self) -> Option<gtk::Widget>;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_decoration_layout(&self) -> Option<GString>;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_has_subtitle(&self) -> bool;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_interpolate_size(&self) -> bool;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_show_close_button(&self) -> bool;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_subtitle(&self) -> Option<GString>;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_title(&self) -> Option<GString>;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_transition_duration(&self) -> u32;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_transition_running(&self) -> bool;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn pack_end<P: IsA<gtk::Widget>>(&self, child: &P);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn pack_start<P: IsA<gtk::Widget>>(&self, child: &P);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_centering_policy(&self, centering_policy: CenteringPolicy);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_custom_title<P: IsA<gtk::Widget>>(&self, title_widget: Option<&P>);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_decoration_layout(&self, layout: Option<&str>);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_has_subtitle(&self, setting: bool);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_interpolate_size(&self, interpolate_size: bool);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_show_close_button(&self, setting: bool);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_subtitle(&self, subtitle: Option<&str>);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_title(&self, title: Option<&str>);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_transition_duration(&self, duration: u32);

    fn get_property_centering_policy(&self) -> CenteringPolicy;

    fn set_property_centering_policy(&self, centering_policy: CenteringPolicy);

    fn get_property_custom_title(&self) -> Option<gtk::Widget>;

    fn set_property_custom_title(&self, custom_title: Option<&gtk::Widget>);

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_property_decoration_layout_set(&self) -> bool;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_property_decoration_layout_set(&self, decoration_layout_set: bool);

    fn get_property_interpolate_size(&self) -> bool;

    fn set_property_interpolate_size(&self, interpolate_size: bool);

    fn get_property_spacing(&self) -> i32;

    fn set_property_spacing(&self, spacing: i32);

    fn get_property_subtitle(&self) -> Option<GString>;

    fn set_property_subtitle(&self, subtitle: Option<&str>);

    fn get_property_title(&self) -> Option<GString>;

    fn set_property_title(&self, title: Option<&str>);

    fn get_property_transition_duration(&self) -> u32;

    fn set_property_transition_duration(&self, transition_duration: u32);

    fn get_property_transition_running(&self) -> bool;

    fn connect_property_centering_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_custom_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_decoration_layout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_decoration_layout_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_has_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_show_close_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_spacing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<HeaderBar>> HeaderBarExt for O {
    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_centering_policy(&self) -> CenteringPolicy {
        unsafe {
            from_glib(handy_sys::hdy_header_bar_get_centering_policy(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_custom_title(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(handy_sys::hdy_header_bar_get_custom_title(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_decoration_layout(&self) -> Option<GString> {
        unsafe {
            from_glib_none(handy_sys::hdy_header_bar_get_decoration_layout(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_has_subtitle(&self) -> bool {
        unsafe {
            from_glib(handy_sys::hdy_header_bar_get_has_subtitle(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_interpolate_size(&self) -> bool {
        unsafe {
            from_glib(handy_sys::hdy_header_bar_get_interpolate_size(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_show_close_button(&self) -> bool {
        unsafe {
            from_glib(handy_sys::hdy_header_bar_get_show_close_button(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_subtitle(&self) -> Option<GString> {
        unsafe {
            from_glib_none(handy_sys::hdy_header_bar_get_subtitle(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_title(&self) -> Option<GString> {
        unsafe {
            from_glib_none(handy_sys::hdy_header_bar_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_transition_duration(&self) -> u32 {
        unsafe {
            handy_sys::hdy_header_bar_get_transition_duration(self.as_ref().to_glib_none().0)
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_transition_running(&self) -> bool {
        unsafe {
            from_glib(handy_sys::hdy_header_bar_get_transition_running(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn pack_end<P: IsA<gtk::Widget>>(&self, child: &P) {
        unsafe {
            handy_sys::hdy_header_bar_pack_end(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn pack_start<P: IsA<gtk::Widget>>(&self, child: &P) {
        unsafe {
            handy_sys::hdy_header_bar_pack_start(self.as_ref().to_glib_none().0, child.as_ref().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_centering_policy(&self, centering_policy: CenteringPolicy) {
        unsafe {
            handy_sys::hdy_header_bar_set_centering_policy(self.as_ref().to_glib_none().0, centering_policy.to_glib());
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_custom_title<P: IsA<gtk::Widget>>(&self, title_widget: Option<&P>) {
        unsafe {
            handy_sys::hdy_header_bar_set_custom_title(self.as_ref().to_glib_none().0, title_widget.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_decoration_layout(&self, layout: Option<&str>) {
        unsafe {
            handy_sys::hdy_header_bar_set_decoration_layout(self.as_ref().to_glib_none().0, layout.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_has_subtitle(&self, setting: bool) {
        unsafe {
            handy_sys::hdy_header_bar_set_has_subtitle(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_interpolate_size(&self, interpolate_size: bool) {
        unsafe {
            handy_sys::hdy_header_bar_set_interpolate_size(self.as_ref().to_glib_none().0, interpolate_size.to_glib());
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_show_close_button(&self, setting: bool) {
        unsafe {
            handy_sys::hdy_header_bar_set_show_close_button(self.as_ref().to_glib_none().0, setting.to_glib());
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_subtitle(&self, subtitle: Option<&str>) {
        unsafe {
            handy_sys::hdy_header_bar_set_subtitle(self.as_ref().to_glib_none().0, subtitle.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_title(&self, title: Option<&str>) {
        unsafe {
            handy_sys::hdy_header_bar_set_title(self.as_ref().to_glib_none().0, title.to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_transition_duration(&self, duration: u32) {
        unsafe {
            handy_sys::hdy_header_bar_set_transition_duration(self.as_ref().to_glib_none().0, duration);
        }
    }

    fn get_property_centering_policy(&self) -> CenteringPolicy {
        unsafe {
            let mut value = Value::from_type(<CenteringPolicy as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"centering-policy\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_centering_policy(&self, centering_policy: CenteringPolicy) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"centering-policy\0".as_ptr() as *const _, Value::from(&centering_policy).to_glib_none().0);
        }
    }

    fn get_property_custom_title(&self) -> Option<gtk::Widget> {
        unsafe {
            let mut value = Value::from_type(<gtk::Widget as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"custom-title\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_custom_title(&self, custom_title: Option<&gtk::Widget>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"custom-title\0".as_ptr() as *const _, Value::from(custom_title).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn get_property_decoration_layout_set(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"decoration-layout-set\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn set_property_decoration_layout_set(&self, decoration_layout_set: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"decoration-layout-set\0".as_ptr() as *const _, Value::from(&decoration_layout_set).to_glib_none().0);
        }
    }

    fn get_property_interpolate_size(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"interpolate-size\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_interpolate_size(&self, interpolate_size: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"interpolate-size\0".as_ptr() as *const _, Value::from(&interpolate_size).to_glib_none().0);
        }
    }

    fn get_property_spacing(&self) -> i32 {
        unsafe {
            let mut value = Value::from_type(<i32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"spacing\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_spacing(&self, spacing: i32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"spacing\0".as_ptr() as *const _, Value::from(&spacing).to_glib_none().0);
        }
    }

    fn get_property_subtitle(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"subtitle\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_subtitle(&self, subtitle: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"subtitle\0".as_ptr() as *const _, Value::from(subtitle).to_glib_none().0);
        }
    }

    fn get_property_title(&self) -> Option<GString> {
        unsafe {
            let mut value = Value::from_type(<GString as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"title\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn set_property_title(&self, title: Option<&str>) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"title\0".as_ptr() as *const _, Value::from(title).to_glib_none().0);
        }
    }

    fn get_property_transition_duration(&self) -> u32 {
        unsafe {
            let mut value = Value::from_type(<u32 as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"transition-duration\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_transition_duration(&self, transition_duration: u32) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"transition-duration\0".as_ptr() as *const _, Value::from(&transition_duration).to_glib_none().0);
        }
    }

    fn get_property_transition_running(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"transition-running\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn connect_property_centering_policy_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_centering_policy_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::centering-policy\0".as_ptr() as *const _,
                Some(transmute(notify_centering_policy_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_custom_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_custom_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::custom-title\0".as_ptr() as *const _,
                Some(transmute(notify_custom_title_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_decoration_layout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_decoration_layout_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::decoration-layout\0".as_ptr() as *const _,
                Some(transmute(notify_decoration_layout_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_decoration_layout_set_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_decoration_layout_set_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::decoration-layout-set\0".as_ptr() as *const _,
                Some(transmute(notify_decoration_layout_set_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_has_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_has_subtitle_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::has-subtitle\0".as_ptr() as *const _,
                Some(transmute(notify_has_subtitle_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_interpolate_size_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::interpolate-size\0".as_ptr() as *const _,
                Some(transmute(notify_interpolate_size_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v0_0_10", feature = "dox"))]
    fn connect_property_show_close_button_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_close_button_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::show-close-button\0".as_ptr() as *const _,
                Some(transmute(notify_show_close_button_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_spacing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_spacing_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::spacing\0".as_ptr() as *const _,
                Some(transmute(notify_spacing_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_subtitle_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_subtitle_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::subtitle\0".as_ptr() as *const _,
                Some(transmute(notify_subtitle_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(transmute(notify_title_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_transition_duration_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::transition-duration\0".as_ptr() as *const _,
                Some(transmute(notify_transition_duration_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_transition_running_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyHeaderBar, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<HeaderBar>
        {
            let f: &F = &*(f as *const F);
            f(&HeaderBar::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::transition-running\0".as_ptr() as *const _,
                Some(transmute(notify_transition_running_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for HeaderBar {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "HeaderBar")
    }
}

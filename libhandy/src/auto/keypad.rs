// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::Value;
use glib_sys;
use gobject_sys;
use gtk;
use handy_sys;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Keypad(Object<handy_sys::HdyKeypad, handy_sys::HdyKeypadClass, KeypadClass>) @extends gtk::Grid, gtk::Container, gtk::Widget, @implements gtk::Orientable;

    match fn {
        get_type => || handy_sys::hdy_keypad_get_type(),
    }
}

impl Keypad {
    pub fn new(only_digits: bool, show_symbols: bool) -> Keypad {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(handy_sys::hdy_keypad_new(only_digits.to_glib(), show_symbols.to_glib())).unsafe_cast()
        }
    }
}

pub const NONE_KEYPAD: Option<&Keypad> = None;

pub trait KeypadExt: 'static {
    fn get_entry(&self) -> Option<gtk::Widget>;

    fn set_entry<P: IsA<gtk::Entry>>(&self, entry: &P);

    fn set_left_action<P: IsA<gtk::Widget>>(&self, widget: &P);

    fn set_right_action<P: IsA<gtk::Widget>>(&self, widget: &P);

    fn show_symbols(&self, visible: bool);

    fn get_property_only_digits(&self) -> bool;

    fn set_property_only_digits(&self, only_digits: bool);

    fn get_property_show_symbols(&self) -> bool;

    fn set_property_show_symbols(&self, show_symbols: bool);

    fn connect_property_entry_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_left_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_only_digits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_right_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_show_symbols_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Keypad>> KeypadExt for O {
    fn get_entry(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(handy_sys::hdy_keypad_get_entry(self.as_ref().to_glib_none().0))
        }
    }

    fn set_entry<P: IsA<gtk::Entry>>(&self, entry: &P) {
        unsafe {
            handy_sys::hdy_keypad_set_entry(self.as_ref().to_glib_none().0, entry.as_ref().to_glib_none().0);
        }
    }

    fn set_left_action<P: IsA<gtk::Widget>>(&self, widget: &P) {
        unsafe {
            handy_sys::hdy_keypad_set_left_action(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    fn set_right_action<P: IsA<gtk::Widget>>(&self, widget: &P) {
        unsafe {
            handy_sys::hdy_keypad_set_right_action(self.as_ref().to_glib_none().0, widget.as_ref().to_glib_none().0);
        }
    }

    fn show_symbols(&self, visible: bool) {
        unsafe {
            handy_sys::hdy_keypad_show_symbols(self.as_ref().to_glib_none().0, visible.to_glib());
        }
    }

    fn get_property_only_digits(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"only-digits\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `only-digits` getter").unwrap()
        }
    }

    fn set_property_only_digits(&self, only_digits: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"only-digits\0".as_ptr() as *const _, Value::from(&only_digits).to_glib_none().0);
        }
    }

    fn get_property_show_symbols(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-symbols\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `show-symbols` getter").unwrap()
        }
    }

    fn set_property_show_symbols(&self, show_symbols: bool) {
        unsafe {
            gobject_sys::g_object_set_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"show-symbols\0".as_ptr() as *const _, Value::from(&show_symbols).to_glib_none().0);
        }
    }

    fn connect_property_entry_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_entry_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyKeypad, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Keypad>
        {
            let f: &F = &*(f as *const F);
            f(&Keypad::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::entry\0".as_ptr() as *const _,
                Some(transmute(notify_entry_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_left_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_left_action_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyKeypad, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Keypad>
        {
            let f: &F = &*(f as *const F);
            f(&Keypad::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::left-action\0".as_ptr() as *const _,
                Some(transmute(notify_left_action_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_only_digits_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_only_digits_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyKeypad, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Keypad>
        {
            let f: &F = &*(f as *const F);
            f(&Keypad::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::only-digits\0".as_ptr() as *const _,
                Some(transmute(notify_only_digits_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_right_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_right_action_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyKeypad, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Keypad>
        {
            let f: &F = &*(f as *const F);
            f(&Keypad::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::right-action\0".as_ptr() as *const _,
                Some(transmute(notify_right_action_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_show_symbols_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_show_symbols_trampoline<P, F: Fn(&P) + 'static>(this: *mut handy_sys::HdyKeypad, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
            where P: IsA<Keypad>
        {
            let f: &F = &*(f as *const F);
            f(&Keypad::from_glib_borrow(this).unsafe_cast())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::show-symbols\0".as_ptr() as *const _,
                Some(transmute(notify_show_symbols_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Keypad {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Keypad")
    }
}

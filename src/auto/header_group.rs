// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct HeaderGroup(Object<ffi::HdyHeaderGroup, ffi::HdyHeaderGroupClass>);

    match fn {
        get_type => || ffi::hdy_header_group_get_type(),
    }
}

impl HeaderGroup {
    pub fn new() -> HeaderGroup {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::hdy_header_group_new())
        }
    }
}

impl Default for HeaderGroup {
    fn default() -> Self {
        Self::new()
    }
}

pub trait HeaderGroupExt {
    //fn add_header_bar(&self, header_bar: /*Ignored*/&gtk::HeaderBar);

    //fn get_focus(&self) -> /*Ignored*/Option<gtk::HeaderBar>;

    //fn get_header_bars(&self) -> /*Ignored*/Vec<gtk::HeaderBar>;

    //fn remove_header_bar(&self, header_bar: /*Ignored*/&gtk::HeaderBar);

    //fn set_focus<'a, P: Into<Option<&'a /*Ignored*/gtk::HeaderBar>>>(&self, header_bar: P);

    fn connect_property_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<HeaderGroup> + IsA<glib::object::Object>> HeaderGroupExt for O {
    //fn add_header_bar(&self, header_bar: /*Ignored*/&gtk::HeaderBar) {
    //    unsafe { TODO: call ffi::hdy_header_group_add_header_bar() }
    //}

    //fn get_focus(&self) -> /*Ignored*/Option<gtk::HeaderBar> {
    //    unsafe { TODO: call ffi::hdy_header_group_get_focus() }
    //}

    //fn get_header_bars(&self) -> /*Ignored*/Vec<gtk::HeaderBar> {
    //    unsafe { TODO: call ffi::hdy_header_group_get_header_bars() }
    //}

    //fn remove_header_bar(&self, header_bar: /*Ignored*/&gtk::HeaderBar) {
    //    unsafe { TODO: call ffi::hdy_header_group_remove_header_bar() }
    //}

    //fn set_focus<'a, P: Into<Option<&'a /*Ignored*/gtk::HeaderBar>>>(&self, header_bar: P) {
    //    unsafe { TODO: call ffi::hdy_header_group_set_focus() }
    //}

    fn connect_property_focus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::focus",
                transmute(notify_focus_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_focus_trampoline<P>(this: *mut ffi::HdyHeaderGroup, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<HeaderGroup> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&HeaderGroup::from_glib_borrow(this).downcast_unchecked())
}

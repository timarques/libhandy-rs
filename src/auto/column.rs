// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gtk;
use gtk_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Column(Object<ffi::HdyColumn, ffi::HdyColumnClass>): [
        gtk::Widget => gtk_ffi::GtkWidget,
    ];

    match fn {
        get_type => || ffi::hdy_column_get_type(),
    }
}

impl Column {
    pub fn new() -> Column {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::hdy_column_new())
        }
    }
}

impl Default for Column {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ColumnExt {
    fn get_maximum_width(&self) -> i32;

    fn set_maximum_width(&self, maximum_width: i32);

    fn connect_property_maximum_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Column> + IsA<glib::object::Object>> ColumnExt for O {
    fn get_maximum_width(&self) -> i32 {
        unsafe {
            ffi::hdy_column_get_maximum_width(self.to_glib_none().0)
        }
    }

    fn set_maximum_width(&self, maximum_width: i32) {
        unsafe {
            ffi::hdy_column_set_maximum_width(self.to_glib_none().0, maximum_width);
        }
    }

    fn connect_property_maximum_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::maximum-width",
                transmute(notify_maximum_width_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_maximum_width_trampoline<P>(this: *mut ffi::HdyColumn, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Column> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Column::from_glib_borrow(this).downcast_unchecked())
}

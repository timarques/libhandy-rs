// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Fold;
use LeafletChildTransitionType;
use LeafletModeTransitionType;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gtk;
use gtk_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Leaflet(Object<ffi::HdyLeaflet, ffi::HdyLeafletClass>): [
        gtk::Widget => gtk_ffi::GtkWidget,
    ];

    match fn {
        get_type => || ffi::hdy_leaflet_get_type(),
    }
}

impl Leaflet {
    pub fn new() -> Leaflet {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::hdy_leaflet_new()).downcast_unchecked()
        }
    }
}

impl Default for Leaflet {
    fn default() -> Self {
        Self::new()
    }
}

pub trait LeafletExt {
    fn get_child_transition_duration(&self) -> u32;

    fn get_child_transition_running(&self) -> bool;

    fn get_child_transition_type(&self) -> LeafletChildTransitionType;

    fn get_fold(&self) -> Fold;

    fn get_homogeneous(&self, fold: Fold, orientation: gtk::Orientation) -> bool;

    fn get_interpolate_size(&self) -> bool;

    fn get_mode_transition_duration(&self) -> u32;

    fn get_mode_transition_type(&self) -> LeafletModeTransitionType;

    fn get_visible_child(&self) -> Option<gtk::Widget>;

    fn get_visible_child_name(&self) -> Option<String>;

    fn set_child_transition_duration(&self, duration: u32);

    fn set_child_transition_type(&self, transition: LeafletChildTransitionType);

    fn set_homogeneous(&self, fold: Fold, orientation: gtk::Orientation, homogeneous: bool);

    fn set_interpolate_size(&self, interpolate_size: bool);

    fn set_mode_transition_duration(&self, duration: u32);

    fn set_mode_transition_type(&self, transition: LeafletModeTransitionType);

    fn set_visible_child<P: IsA<gtk::Widget>>(&self, visible_child: &P);

    fn set_visible_child_name(&self, name: &str);

    fn get_property_hhomogeneous_folded(&self) -> bool;

    fn set_property_hhomogeneous_folded(&self, hhomogeneous_folded: bool);

    fn get_property_hhomogeneous_unfolded(&self) -> bool;

    fn set_property_hhomogeneous_unfolded(&self, hhomogeneous_unfolded: bool);

    fn get_property_vhomogeneous_folded(&self) -> bool;

    fn set_property_vhomogeneous_folded(&self, vhomogeneous_folded: bool);

    fn get_property_vhomogeneous_unfolded(&self) -> bool;

    fn set_property_vhomogeneous_unfolded(&self, vhomogeneous_unfolded: bool);

    fn connect_property_child_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_child_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_child_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_fold_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_hhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mode_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mode_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_vhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_visible_child_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Leaflet> + IsA<glib::object::Object>> LeafletExt for O {
    fn get_child_transition_duration(&self) -> u32 {
        unsafe {
            ffi::hdy_leaflet_get_child_transition_duration(self.to_glib_none().0)
        }
    }

    fn get_child_transition_running(&self) -> bool {
        unsafe {
            from_glib(ffi::hdy_leaflet_get_child_transition_running(self.to_glib_none().0))
        }
    }

    fn get_child_transition_type(&self) -> LeafletChildTransitionType {
        unsafe {
            from_glib(ffi::hdy_leaflet_get_child_transition_type(self.to_glib_none().0))
        }
    }

    fn get_fold(&self) -> Fold {
        unsafe {
            from_glib(ffi::hdy_leaflet_get_fold(self.to_glib_none().0))
        }
    }

    fn get_homogeneous(&self, fold: Fold, orientation: gtk::Orientation) -> bool {
        unsafe {
            from_glib(ffi::hdy_leaflet_get_homogeneous(self.to_glib_none().0, fold.to_glib(), orientation.to_glib()))
        }
    }

    fn get_interpolate_size(&self) -> bool {
        unsafe {
            from_glib(ffi::hdy_leaflet_get_interpolate_size(self.to_glib_none().0))
        }
    }

    fn get_mode_transition_duration(&self) -> u32 {
        unsafe {
            ffi::hdy_leaflet_get_mode_transition_duration(self.to_glib_none().0)
        }
    }

    fn get_mode_transition_type(&self) -> LeafletModeTransitionType {
        unsafe {
            from_glib(ffi::hdy_leaflet_get_mode_transition_type(self.to_glib_none().0))
        }
    }

    fn get_visible_child(&self) -> Option<gtk::Widget> {
        unsafe {
            from_glib_none(ffi::hdy_leaflet_get_visible_child(self.to_glib_none().0))
        }
    }

    fn get_visible_child_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::hdy_leaflet_get_visible_child_name(self.to_glib_none().0))
        }
    }

    fn set_child_transition_duration(&self, duration: u32) {
        unsafe {
            ffi::hdy_leaflet_set_child_transition_duration(self.to_glib_none().0, duration);
        }
    }

    fn set_child_transition_type(&self, transition: LeafletChildTransitionType) {
        unsafe {
            ffi::hdy_leaflet_set_child_transition_type(self.to_glib_none().0, transition.to_glib());
        }
    }

    fn set_homogeneous(&self, fold: Fold, orientation: gtk::Orientation, homogeneous: bool) {
        unsafe {
            ffi::hdy_leaflet_set_homogeneous(self.to_glib_none().0, fold.to_glib(), orientation.to_glib(), homogeneous.to_glib());
        }
    }

    fn set_interpolate_size(&self, interpolate_size: bool) {
        unsafe {
            ffi::hdy_leaflet_set_interpolate_size(self.to_glib_none().0, interpolate_size.to_glib());
        }
    }

    fn set_mode_transition_duration(&self, duration: u32) {
        unsafe {
            ffi::hdy_leaflet_set_mode_transition_duration(self.to_glib_none().0, duration);
        }
    }

    fn set_mode_transition_type(&self, transition: LeafletModeTransitionType) {
        unsafe {
            ffi::hdy_leaflet_set_mode_transition_type(self.to_glib_none().0, transition.to_glib());
        }
    }

    fn set_visible_child<P: IsA<gtk::Widget>>(&self, visible_child: &P) {
        unsafe {
            ffi::hdy_leaflet_set_visible_child(self.to_glib_none().0, visible_child.to_glib_none().0);
        }
    }

    fn set_visible_child_name(&self, name: &str) {
        unsafe {
            ffi::hdy_leaflet_set_visible_child_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn get_property_hhomogeneous_folded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hhomogeneous-folded".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_hhomogeneous_folded(&self, hhomogeneous_folded: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "hhomogeneous-folded".to_glib_none().0, Value::from(&hhomogeneous_folded).to_glib_none().0);
        }
    }

    fn get_property_hhomogeneous_unfolded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "hhomogeneous-unfolded".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_hhomogeneous_unfolded(&self, hhomogeneous_unfolded: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "hhomogeneous-unfolded".to_glib_none().0, Value::from(&hhomogeneous_unfolded).to_glib_none().0);
        }
    }

    fn get_property_vhomogeneous_folded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "vhomogeneous-folded".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_vhomogeneous_folded(&self, vhomogeneous_folded: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "vhomogeneous-folded".to_glib_none().0, Value::from(&vhomogeneous_folded).to_glib_none().0);
        }
    }

    fn get_property_vhomogeneous_unfolded(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "vhomogeneous-unfolded".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    fn set_property_vhomogeneous_unfolded(&self, vhomogeneous_unfolded: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "vhomogeneous-unfolded".to_glib_none().0, Value::from(&vhomogeneous_unfolded).to_glib_none().0);
        }
    }

    fn connect_property_child_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::child-transition-duration",
                transmute(notify_child_transition_duration_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_child_transition_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::child-transition-running",
                transmute(notify_child_transition_running_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_child_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::child-transition-type",
                transmute(notify_child_transition_type_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_fold_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::fold",
                transmute(notify_fold_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_hhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::hhomogeneous-folded",
                transmute(notify_hhomogeneous_folded_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_hhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::hhomogeneous-unfolded",
                transmute(notify_hhomogeneous_unfolded_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_interpolate_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::interpolate-size",
                transmute(notify_interpolate_size_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_mode_transition_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::mode-transition-duration",
                transmute(notify_mode_transition_duration_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_mode_transition_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::mode-transition-type",
                transmute(notify_mode_transition_type_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_vhomogeneous_folded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::vhomogeneous-folded",
                transmute(notify_vhomogeneous_folded_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_vhomogeneous_unfolded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::vhomogeneous-unfolded",
                transmute(notify_vhomogeneous_unfolded_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_visible_child_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::visible-child",
                transmute(notify_visible_child_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_visible_child_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::visible-child-name",
                transmute(notify_visible_child_name_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_child_transition_duration_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_child_transition_running_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_child_transition_type_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_fold_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hhomogeneous_folded_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_hhomogeneous_unfolded_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_interpolate_size_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mode_transition_duration_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_mode_transition_type_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_vhomogeneous_folded_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_vhomogeneous_unfolded_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_visible_child_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_visible_child_name_trampoline<P>(this: *mut ffi::HdyLeaflet, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Leaflet> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Leaflet::from_glib_borrow(this).downcast_unchecked())
}

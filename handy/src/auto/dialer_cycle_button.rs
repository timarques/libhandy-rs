// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use DialerButton;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use gtk;
use gtk_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct DialerCycleButton(Object<ffi::HdyDialerCycleButton, ffi::HdyDialerCycleButtonClass>): [
        DialerButton,
        gtk::Widget => gtk_ffi::GtkWidget,
    ];

    match fn {
        get_type => || ffi::hdy_dialer_cycle_button_get_type(),
    }
}

impl DialerCycleButton {
    pub fn new(symbols: &str) -> DialerCycleButton {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::hdy_dialer_cycle_button_new(symbols.to_glib_none().0)).downcast_unchecked()
        }
    }
}

pub trait DialerCycleButtonExt {
    fn get_current_symbol(&self) -> char;

    fn get_cycle_timeout(&self) -> i32;

    fn is_cycling(&self) -> bool;

    fn set_cycle_timeout(&self, timeout: i32);

    fn stop_cycle(&self);

    fn connect_cycle_end<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_cycle_start<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_cycle_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<DialerCycleButton> + IsA<glib::object::Object>> DialerCycleButtonExt for O {
    fn get_current_symbol(&self) -> char {
        unsafe {
            from_glib(ffi::hdy_dialer_cycle_button_get_current_symbol(self.to_glib_none().0))
        }
    }

    fn get_cycle_timeout(&self) -> i32 {
        unsafe {
            ffi::hdy_dialer_cycle_button_get_cycle_timeout(self.to_glib_none().0)
        }
    }

    fn is_cycling(&self) -> bool {
        unsafe {
            from_glib(ffi::hdy_dialer_cycle_button_is_cycling(self.to_glib_none().0))
        }
    }

    fn set_cycle_timeout(&self, timeout: i32) {
        unsafe {
            ffi::hdy_dialer_cycle_button_set_cycle_timeout(self.to_glib_none().0, timeout);
        }
    }

    fn stop_cycle(&self) {
        unsafe {
            ffi::hdy_dialer_cycle_button_stop_cycle(self.to_glib_none().0);
        }
    }

    fn connect_cycle_end<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "cycle-end",
                transmute(cycle_end_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_cycle_start<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "cycle-start",
                transmute(cycle_start_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_cycle_timeout_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::cycle-timeout",
                transmute(notify_cycle_timeout_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn cycle_end_trampoline<P>(this: *mut ffi::HdyDialerCycleButton, f: glib_ffi::gpointer)
where P: IsA<DialerCycleButton> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DialerCycleButton::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn cycle_start_trampoline<P>(this: *mut ffi::HdyDialerCycleButton, f: glib_ffi::gpointer)
where P: IsA<DialerCycleButton> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DialerCycleButton::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_cycle_timeout_trampoline<P>(this: *mut ffi::HdyDialerCycleButton, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<DialerCycleButton> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&DialerCycleButton::from_glib_borrow(this).downcast_unchecked())
}

// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ArrowsDirection;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use gtk;
use gtk_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct Arrows(Object<ffi::HdyArrows, ffi::HdyArrowsClass>): [
        gtk::Widget => gtk_ffi::GtkWidget,
    ];

    match fn {
        get_type => || ffi::hdy_arrows_get_type(),
    }
}

impl Arrows {
    pub fn new() -> Arrows {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::hdy_arrows_new()).downcast_unchecked()
        }
    }
}

impl Default for Arrows {
    fn default() -> Self {
        Self::new()
    }
}

pub trait ArrowsExt: 'static {
    fn animate(&self);

    fn get_count(&self) -> u32;

    fn get_direction(&self) -> ArrowsDirection;

    fn get_duration(&self) -> u32;

    fn set_count(&self, count: u32);

    fn set_direction(&self, direction: ArrowsDirection);

    fn set_duration(&self, duration: u32);

    fn connect_property_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_direction_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Arrows>> ArrowsExt for O {
    fn animate(&self) {
        unsafe {
            ffi::hdy_arrows_animate(self.to_glib_none().0);
        }
    }

    fn get_count(&self) -> u32 {
        unsafe {
            ffi::hdy_arrows_get_count(self.to_glib_none().0)
        }
    }

    fn get_direction(&self) -> ArrowsDirection {
        unsafe {
            from_glib(ffi::hdy_arrows_get_direction(self.to_glib_none().0))
        }
    }

    fn get_duration(&self) -> u32 {
        unsafe {
            ffi::hdy_arrows_get_duration(self.to_glib_none().0)
        }
    }

    fn set_count(&self, count: u32) {
        unsafe {
            ffi::hdy_arrows_set_count(self.to_glib_none().0, count);
        }
    }

    fn set_direction(&self, direction: ArrowsDirection) {
        unsafe {
            ffi::hdy_arrows_set_direction(self.to_glib_none().0, direction.to_glib());
        }
    }

    fn set_duration(&self, duration: u32) {
        unsafe {
            ffi::hdy_arrows_set_duration(self.to_glib_none().0, duration);
        }
    }

    fn connect_property_count_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0 as *mut _, b"notify::count\0".as_ptr() as *const _,
                transmute(notify_count_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_direction_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0 as *mut _, b"notify::direction\0".as_ptr() as *const _,
                transmute(notify_direction_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_duration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.to_glib_none().0 as *mut _, b"notify::duration\0".as_ptr() as *const _,
                transmute(notify_duration_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_count_trampoline<P>(this: *mut ffi::HdyArrows, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Arrows> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Arrows::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_direction_trampoline<P>(this: *mut ffi::HdyArrows, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Arrows> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Arrows::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_duration_trampoline<P>(this: *mut ffi::HdyArrows, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Arrows> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Arrows::from_glib_borrow(this).downcast_unchecked())
}

impl fmt::Display for Arrows {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Arrows")
    }
}
